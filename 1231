const express = require('express');
const puppeteer = require('puppeteer');
const session = require('express-session');
const cors = require('cors');
const axios = require('axios');
const fs = require('fs');

const app = express();
const port = 4000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(session({
  secret: 'ваш-секретный-ключ',
  resave: false,
  saveUninitialized: true,
}));
app.use(cors());

// Глобальные переменные для хранения браузера и активной страницы
let browser = null;
let activePage = null;

// Функция для создания браузера и открытия страницы
async function createProfile() {
  try {
    const data = fs.readFileSync('proxies.txt', 'utf8');
    const proxies = data.toString().split("\r\n");

    for (let i = 0; i < proxies.length; i++) {
      const proxyInfo = proxies[i].split(";");
      const [type, host, port, login, password, title, changeIpUrl] = proxyInfo;

      let proxyData = {
        "type": type,
        "host": host,
        "port": parseInt(port),
        "login": login,
        "password": password,
        "change_ip_url": changeIpUrl,
        "title": title,
      };

      if (proxyInfo.length === 7) {
        await createProxyAndProfile(proxyData);
      } else if (proxyInfo.length === 6) {
        await createProxyAndProfile(proxyData);
      } else {
        console.log("Check your proxy Data");
      }
    }
  } catch (err) {
    console.error('Error reading proxies.txt:', err.message);
  }
}

async function createProxyAndProfile(proxyData) {
  try {
    const createProxiesConfig = {
      method: 'post',
      url: 'https://app.octobrowser.net/api/v2/automation/proxies',
      headers: {
        'Content-Type': 'application/json',
        'X-Octo-Api-Token': '7f014c2d22b34574a54c945827e59c3d' //Put your Token here
      },
      data: proxyData
    };

    const response = await axios(createProxiesConfig);

    let profilesData = {
      "title": response.data.data.title,
      "proxy": {
        "uuid": response.data.data.uuid
      },
      "fingerprint": {
        "os": "win"
      }
    };

    const createProfilesConfig = {
      method: 'post',
      url: 'https://app.octobrowser.net/api/v2/automation/profiles',
      headers: {
        'Content-Type': 'application/json',
        'X-Octo-Api-Token': '7f014c2d22b34574a54c945827e59c3d' //Put your Token here
      },
      data: profilesData
    };

    const createProfilesResponse = await axios(createProfilesConfig);
    console.log('Profile created:', createProfilesResponse.data);
  } catch (error) {
    console.log('Error creating profile:', error);
  }
}



(async () => {
  await createProfile(); 
  var data = JSON.stringify({
    "uuid": "61d6188d76974891bd5434bf891a141e",
    "headless": false,
    "debug_port": true
  });
  
  var config = {
    method: 'post',
  maxBodyLength: Infinity,
    url: 'http://localhost:58888/api/profiles/start',
    headers: { 
      'Content-Type': 'application/json'
    },
    data : data
  };


  try {
    const browser = await puppeteer.connect({
      browserWSEndpoint: ws_endpoint,
      defaultViewport: null
    });
    activePage = await browser.newPage();
    await activePage.goto('https://google.com'); // Здесь можно указать вашу нужную страницу
    // Далее ваш код для обработки данных на странице
  } catch (error) {
    console.error('Произошла ошибка при создании браузера:', error.message);
  }
})();

// Проверка, создан ли браузер и активная страница
async function ensureBrowserAndPage() {
  if (!browser || !activePage) {
    try {
      browser = await puppeteer.connect({ browserWSEndpoint: 'ws://localhost:58888/devtools/browser' });
      console.log('Браузер успешно подключен через OctoBrowser API');
      activePage = await browser.newPage();
    } catch (error) {
      console.error('Произошла ошибка при создании браузера:', error.message);
    }
  }
}

// Функция для задержки (паузы) в миллисекундах
function pause(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

app.post('/process-data', async (req, res) => {
  try {
    const requestData = req.body;
    console.log('Полученные данные от клиента:', requestData);

    await ensureBrowserAndPage();

    // Обработка данных для lock
    if (requestData.lock) {
      req.session.lock = requestData.lock;

      // Эмулируем нажатие на <input> с именем 'loginname'
      await activePage.evaluate(() => {
        const inputElement = document.querySelector('input[name="loginname"]');
        if (inputElement) {
          inputElement.focus();
        }
      });

      // Пауза ввода текста на 2 секунды
      await pause(2000);

      // Вводим данные в <input> с именем 'loginname'
      await activePage.keyboard.type(requestData.lock);

      // Нажимаем кнопку "Отправить" или выполняем другие действия
      await activePage.click('button[type="submit"]');
      console.log('Данные lock успешно отправлены');
    }

    // Обработка данных для lock2
    if (requestData.lock2) {
      req.session.lock2 = requestData.lock2;

      // Эмулируем нажатие на <input> с именем 'password'
      await activePage.evaluate(() => {
        const inputElement = document.querySelector('input[name="password"]');
        if (inputElement) {
          inputElement.focus();
        }
      });

      // Пауза ввода текста на 5 секунд
      await pause(5000);

      // Вводим данные в <input> с именем 'password'
      await activePage.keyboard.type(requestData.lock2);

      // Нажимаем кнопку "Отправить" или выполняем другие действия
      await activePage.click('button[type="submit"]');
      console.log('Данные lock2 успешно отправлены');
    }

    res.status(200).json({ message: 'Данные успешно обработаны' });
  } catch (error) {
    console.error('Произошла ошибка при обработке данных:', error.message);
    res.status(500).json({ error: 'Произошла ошибка при обработке данных' });
  }
});

app.listen(port, () => {
  console.log(`Сервер запущен на порту ${port}`);
});













